CNGVY5BZPTXLMCOVVTQSILPUHWQWZDCE


http://127.0.0.1:5000/login

http://127.0.0.1:5000/register


senhaexata@gmail.com
123456789



html dashboard


{% extends "base.html" %}

{% block title %}Dashboard{% endblock %}

{% block content %}
<div class="container">
    <div class="d-flex justify-content-between align-items-center mb-4">
        <h1>Bem-vindo, {{ current_user.email }}!</h1>
        <a href="{{ url_for('logout') }}" class="btn btn-outline-danger">Sair</a>
    </div>

    <div class="card shadow mb-4">
        <div class="card-body">
            <h3 class="card-title">Adicionar Item</h3>
            <form method="POST" action="{{ url_for('add') }}" class="row g-3">
                <div class="col-10">
                    <input type="text" class="form-control" name="content" 
                           placeholder="Digite algo..." required>
                </div>
                <div class="col-2">
                    <button type="submit" class="btn btn-primary w-100">+</button>
                </div>
            </form>
        </div>
    </div>

    <div class="card shadow">
        <div class="card-body">
            <h3 class="card-title mb-3">Seus Itens</h3>
            {% if data %}
            <ul class="list-group">
                {% for item in data %}
                <li class="list-group-item d-flex justify-content-between align-items-center">
                    {{ item.content }}
                    <a href="{{ url_for('delete', id=item.id) }}" 
                       class="btn btn-sm btn-outline-danger">Excluir</a>
                </li>
                {% endfor %}
            </ul>
            {% else %}
            <div class="alert alert-info">Nenhum item cadastrado ainda.</div>
            {% endif %}
        </div>
    </div>
</div>
{% endblock %}




1 rota

app.py
@app.route('/dashboard')
@login_required
def dashboard():
    if not session.get('2fa_passed'):
        flash('Complete a verifica√ß√£o 2FA primeiro!', 'warning')
        return redirect(url_for('verify_2fa'))
    return render_template('dashboard.html')


2 rota

@app.route('/dashboard')
@login_required
def dashboard():
    if not session.get('2fa_passed'):
        flash('Complete a verifica√ß√£o 2FA!', 'warning')
        return redirect(url_for('verify_2fa'))
    
    # Garante que o template existe
    try:
        return render_template('dashboard.html')
    except TemplateNotFound:
        flash('P√°gina em constru√ß√£o', 'info')
        return "<h1>Dashboard Funcionando!</h1>"  # Fallback simples



















app.py verify-2fa


@app.route('/verify-2fa', methods=['GET', 'POST'])
@login_required
def verify_2fa():
    # Garante que o usu√°rio tem secret_2fa
    secret = getattr(current_user, 'secret_2fa', None)
    if not secret:
        flash('Configura√ß√£o 2FA inv√°lida!', 'danger')
        return redirect(url_for('login'))

    if request.method == 'POST':
        user_code = request.form.get('code', '').strip()
        if not user_code:
            flash('Digite o c√≥digo!', 'danger')
        else:
            totp = pyotp.TOTP(secret)
            if totp.verify(user_code, valid_window=1):  # Aceita c√≥digo atual/adjacente
                session['2fa_passed'] = True  # Marca como verificado
                return redirect(url_for('dashboard'))
            flash('C√≥digo inv√°lido', 'danger')

    return render_template('verify_2fa.html')








verify 2fa.html



{% extends "base.html" %}

{% block content %}
<div class="container mt-5">
    <div class="row justify-content-center">
        <div class="col-md-6">
            <div class="card shadow">
                <div class="card-body">
                    <h2 class="text-center mb-4">Verifica√ß√£o 2FA</h2>
                    
                    {% with messages = get_flashed_messages(with_categories=true) %}
                        {% for category, message in messages %}
                            <div class="alert alert-{{ category }}">{{ message }}</div>
                        {% endfor %}
                    {% endwith %}

                    <form method="POST">
                        <div class="mb-3">
                            <label class="form-label">C√≥digo do Authenticator</label>
                            <input type="text" 
                                   name="code" 
                                   class="form-control" 
                                   placeholder="6 d√≠gitos" 
                                   required
                                   autofocus>
                        </div>
                        <button type="submit" class="btn btn-primary w-100">Verificar</button>
                    </form>

                    <!-- Ajuda para usu√°rios -->
                    <div class="mt-3 text-center small text-muted">
                        <p>N√£o recebeu o c√≥digo?</p>
                        <ul class="list-unstyled">
                            <li>‚Üª Atualize seu app autenticador (puxe para baixo)</li>
                            <li>üîë Use a chave manual: <code>{{ current_user.secret_2fa }}</code></li>
                        </ul>
                    </div>
                </div>
            </div>
        </div>
    </div>
</div>
{% endblock %}

























pip install

# Instale todas as depend√™ncias necess√°rias
pip install flask flask-sqlalchemy flask-login pyotp qrcode[pil] pillow werkzeug

# Caso queira instalar uma vers√£o espec√≠fica (recomendado para evitar conflitos)
pip install flask==2.3.2 flask-sqlalchemy==3.0.3 flask-login==0.6.2 pyotp==2.8.0 qrcode[pil]==7.4.2 pillow==10.0.0 werkzeug==2.3.6









executar as imigra√ß√µes

flask shell
>>> from app import db
>>> db.create_all()
>>> exit()

reiniciar o servidor
flask run --debug





























app.py (TA FUNCIONANDO)








import os
from flask import Flask, render_template, request, redirect, url_for, flash, session
from flask_sqlalchemy import SQLAlchemy
from flask_login import LoginManager, UserMixin, login_user, logout_user, current_user, login_required
import pyotp
import qrcode
from io import BytesIO
import base64
from werkzeug.security import generate_password_hash, check_password_hash

app = Flask(__name__, template_folder='templates')
app.secret_key = 'SUA_CHAVE_MUITO_SECRETA_AQUI_123!@#'
app.config['SQLALCHEMY_DATABASE_URI'] = 'sqlite:///database.db'
app.config['SQLALCHEMY_TRACK_MODIFICATIONS'] = False

db = SQLAlchemy(app)
login_manager = LoginManager(app)
login_manager.login_view = 'login'

class User(UserMixin, db.Model):
    id = db.Column(db.Integer, primary_key=True)
    email = db.Column(db.String(100), unique=True, nullable=False)
    password = db.Column(db.String(200), nullable=False)
    secret_2fa = db.Column(db.String(32))

@login_manager.user_loader
def load_user(user_id):
    return User.query.get(int(user_id))

@app.route('/')
def home():
    return redirect(url_for('login'))

@app.route('/login', methods=['GET', 'POST'])
def login():
    if request.method == 'POST':
        email = request.form.get('email')
        password = request.form.get('password')
        user = User.query.filter_by(email=email).first()
        
        if user and check_password_hash(user.password, password):
            login_user(user)
            return redirect(url_for('verify_2fa'))
        flash('Email ou senha inv√°lidos!', 'danger')
    return render_template('login.html')

@app.route('/register', methods=['GET', 'POST'])
def register():
    if request.method == 'POST':
        email = request.form.get('email')
        password = request.form.get('password')
        
        if User.query.filter_by(email=email).first():
            flash('Email j√° registrado!', 'danger')
            return redirect(url_for('register'))
        
        secret_2fa = pyotp.random_base32()
        hashed_pw = generate_password_hash(password)
        
        # Gera QR Code
        uri = pyotp.totp.TOTP(secret_2fa).provisioning_uri(email, issuer_name="MeuApp")
        img = qrcode.make(uri)
        buffered = BytesIO()
        img.save(buffered, format="PNG")
        img_str = base64.b64encode(buffered.getvalue()).decode()
        
        new_user = User(email=email, password=hashed_pw, secret_2fa=secret_2fa)
        db.session.add(new_user)
        db.session.commit()
        
        return render_template('register.html', 
                           qrcode_img=img_str,
                           secret_2fa=secret_2fa)
    
    return render_template('register.html')

@app.route('/verify-2fa', methods=['GET', 'POST'])
@login_required
def verify_2fa():
    # Verifica se o usu√°rio est√° autenticado e tem secret_2fa
    if not current_user.is_authenticated or not hasattr(current_user, 'secret_2fa'):
        flash('Acesso n√£o autorizado', 'danger')
        return redirect(url_for('login'))

    secret = current_user.secret_2fa

    if request.method == 'POST':
        user_code = request.form.get('code', '').strip()
        
        if not user_code:
            flash('Digite o c√≥digo 2FA', 'danger')
        else:
            totp = pyotp.TOTP(secret)
            if totp.verify(user_code, valid_window=1):
                session['2fa_passed'] = True  # ‚Üê Agora usando session corretamente
                return redirect(url_for('dashboard'))
            flash('C√≥digo 2FA inv√°lido', 'danger')

    return render_template('verify_2fa.html')

@app.route('/dashboard')
@login_required
def dashboard():
    if not session.get('2fa_passed'):  # ‚Üê Agora session est√° definido
        flash('Complete a verifica√ß√£o 2FA primeiro', 'warning')
        return redirect(url_for('verify_2fa'))
    
    return render_template('dashboard.html')
    
@app.route('/logout')
@login_required
def logout():
    logout_user()
    return redirect(url_for('login'))

if __name__ == '__main__':
    with app.app_context():
        db.create_all()
    app.run(debug=True)
